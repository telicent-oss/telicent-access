# Build and push telicent-access
name: publish.yml

on:
  # Manually execute
  push:
    branches:
      - main
    paths:
      - CHANGELOG.md

  #add dispatch in case job fails and needs to be manually executed
  workflow_dispatch:

jobs:
  get_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Get version from package.json
        id: semver
        uses: martinbeentjes/npm-get-version-action@main
    outputs:
      version: ${{ steps.semver.outputs.current-version }}

  integrated_api_tests:
    permissions:
      id-token: write
      contents: read
      packages: write
    needs: get_version
    env:
      APP_NAME: access
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: configure-node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Get node version
        id: node
        run: |
          echo "version=$(node -v)" >> $GITHUB_OUTPUT

      - name: Get node_modules cache
        uses: actions/cache@v3
        id: node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}

      - name: Install dependencies
        run: mkdir reports && LOCAL_MACHINE=false yarn install
        working-directory: frontend
      - name: Run frontend tests
        run: yarn test:ci
        working-directory: frontend
      - name: Install API dependencies
        run: LOCAL_MACHINE=false yarn install
      - name: Run API tests
        run: yarn global add jest && yarn test:ci

  integrated_ui_tests:
    permissions:
      id-token: write
      contents: read
      packages: write
    needs: get_version
    env:
      APP_NAME: access
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: configure-node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Get node version
        id: node
        run: |
          echo "version=$(node -v)" >> $GITHUB_OUTPUT

      - name: Get node_modules cache
        uses: actions/cache@v3
        id: node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}
      - name: Install API dependencies
        run: LOCAL_MACHINE=false yarn install
      - name: Run API tests
        run: yarn global add jest && yarn test:ci

  build_ui_artefact:
    permissions:
      id-token: write
      contents: read
      packages: write
    needs:
      - integrated_ui_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: configure-node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Get node version
        id: node
        run: echo "version=$(node -v)" >> $GITHUB_OUTPUT
      - name: Get node_modules cache
        uses: actions/cache@v3
        id: node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}
      - name: Install dependencies
        run: LOCAL_MACHINE=false yarn install --network-concurrency 1 # Network concurrency to avoid rate-limiting
        working-directory: frontend

      - name: Update frontend/package.json with new version from root/package.json
        run: |
          VERSION=$(jq -r .version package.json) &&
          jq --arg version "$VERSION" '.version = $version' frontend/package.json > frontend/package.tmp &&
          mv frontend/package.tmp frontend/package.json
          cat frontend/package.json | jq .verison
      - name: Build UI application
        run: cd frontend && yarn build:tailwind && LOCAL_MACHINE=false yarn build && cd -
      - name: Upload build to artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: frontend/build/

  build_api_artefact:
    permissions:
      id-token: write
      contents: read
      packages: write
    needs:
      - integrated_api_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: configure-node
        uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Get node version
        id: node
        run: echo "version=$(node -v)" >> $GITHUB_OUTPUT
      - name: Get node_modules cache
        uses: actions/cache@v3
        id: node_modules
        with:
          path: |
            **/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}-${{ steps.node.outputs.version }}
      - name: Install dependencies
        run: LOCAL_MACHINE=false yarn install --network-concurrency 1 # Network concurrency to avoid rate-limiting
      - name: Build UI application
        run: LOCAL_MACHINE=false yarn build
      - name: Upload build to artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  vuln_scan_api:
    needs:
      - get_version
      - integrated_api_tests
    uses: telicent-oss/shared-workflows/.github/workflows/vulnerability-scanning-on-repo.yml@main
    with:
      APP_NAME: access
    secrets: inherit

  vuln_scan_frontend:
    needs:
      - get_version
      - integrated_ui_tests
    uses: telicent-oss/shared-workflows/.github/workflows/vulnerability-scanning-on-repo.yml@main
    with:
      APP_NAME: access
      PACKAGE_DIRECTORY: frontend
    secrets: inherit

  publish_frontend:
    needs:
      - integrated_ui_tests
      - get_version
      - vuln_scan_frontend
      - build_ui_artefact
    uses: telicent-oss/shared-workflows/.github/workflows/docker-push-to-registries.yml@main
    with:
      APP_NAME: access
      DOCKERFILE: Dockerfile
      PATH: ./frontend
      BUILD_ARTIFACT: build
      VERSION: ${{ needs.get_version.outputs.version }}
      ALLOW_MUTABLE_TAGS: false
      PACKAGE_DIRECTORY: frontend
      DRY_RUN: ${{ github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/heads/prerelease/') }}
      GRYPE_SECURITY_ISSUES_BLOCK_ONLY_IF_FIX_AVAILABLE: false
    secrets: inherit

  publish_api:
    needs:
      - integrated_api_tests
      - get_version
      - vuln_scan_api
      - build_api_artefact
    uses: telicent-oss/shared-workflows/.github/workflows/docker-push-to-registries.yml@main
    with:
      APP_NAME: access-api
      DOCKERFILE: Dockerfile
      BUILD_ARTIFACT: dist
      VERSION: ${{ needs.get_version.outputs.version }}
      ALLOW_MUTABLE_TAGS: false
      DRY_RUN: ${{ github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/heads/prerelease/') }}
      GRYPE_SECURITY_ISSUES_BLOCK_ONLY_IF_FIX_AVAILABLE: false
    secrets: inherit
